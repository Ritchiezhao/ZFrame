// ============================================================================================= //
// This is generated by tool. Don't edit this manually.
// Encoding: Unicode
// ============================================================================================= //


using System.IO;
using System.Text;
using System.Collections.Generic;

using zf.util;

// ----------------------------------------------------------------------------
namespace zf.util
{
    // Struct : SEnvLink
    public partial class SEnvLink
    {
        public void Deserialize(BinaryReader reader)
        {
            fromEnv = new TID();
            fromEnv.Deserialize(reader);

            toEnv = new TID();
            toEnv.Deserialize(reader);

            sameThreadDirect = reader.ReadBoolean();

            bufferSize = reader.ReadInt32();
        }
    }
}

// ----------------------------------------------------------------------------
namespace zf.util
{
    // Class : TGameApp
    public partial class TGameApp
    {
        public override void Deserialize(BinaryReader reader)
        {
            base.Deserialize(reader);
            name = StringAtom.FromReader(reader);

            language = StringAtom.FromReader(reader);

            modConfig = reader.ReadInt32();

            int len_modPaths = reader.ReadInt32();
            modPaths = new StringAtom[len_modPaths];
            for (int i_modPaths = 0; i_modPaths < len_modPaths; ++i_modPaths)
            {
                modPaths[i_modPaths] = StringAtom.FromReader(reader);
            }

            int len_launchers = reader.ReadInt32();
            launchers = new StringAtom[len_launchers];
            for (int i_launchers = 0; i_launchers < len_launchers; ++i_launchers)
            {
                launchers[i_launchers] = StringAtom.FromReader(reader);
            }
        }
    }
}

